{"version":3,"sources":["pages/pickaxes/PaintjobIcon.tsx","pages/pickaxes/PaintjobCard.tsx","pages/pickaxes/PickaxeProgressBar.tsx","pages/pickaxes/PickaxePaintjobs.tsx","pages/pickaxes/PickaxeCard.tsx","pages/pickaxes/UniquePartCard.tsx","pages/pickaxes/PickaxeParts.tsx","pages/pickaxes/PickaxesPage.tsx"],"names":["PaintjobIcon","props","style","position","height","width","margin","transform","top","left","Image","alt","paintjob","src","PaintjobIconMap","accentColor","MinerColor","Scout","PaintjobCard","db","useDB","paintjobPart","query","useSuspendedLiveQuery","pickaxes","get","name","part","toggleEntry","useCallback","undefined","add","where","delete","xxl","xl","lg","md","sm","xs","Ribbon","className","text","hoverable","onClick","size","backgroundColor","transition","memo","barColor","category","getProgress","progress","progressPercentage","Math","round","useEffect","gtag","event_category","event_label","value","percent","strokeColor","format","title","preview","RockAndStone","png","Panel","Meta","PickaxePaintjobs","paintjobs","panelProps","key","marginTop","header","avatar","PaintPickaxeIcon","description","gutter","map","Driller","contrastText","MinerColorContrastText","CheckboxOptions","PickaxeCard","imgSrc","checkedParts","pickaxe","and","p","toArray","setCheckedParts","values","newlyCheckedItems","filter","v","includes","length","bulkAdd","i","newlyUncheckedItems","isComplete","useMemo","isPartiallyComplete","e","target","HTMLElement","matches","c","iconSrc","source","Assignment","Credit","LostPack","whiteSpace","float","headStyle","color","fontWeight","outline","justify","span","textAlign","destroyTooltipOnHide","placement","assignmentRank","icon","webp","fallback","border","type","align","Group","onChange","option","Engineer","UniquePartCard","pickaxeUniques","uniquePart","imageRef","useRef","current","contains","display","ref","PickaxeParts","PickaxeIcon","UniqueParts","PickaxesPage","getPartProgress","a","anyOf","PickaxeSets","count","acquiredPickaxes","PickaxeUniquePartNames","acquiredUniques","getPaintjobProgress","PickaxePaintjobNames","acquiredPaintjobs","expandIconPosition","defaultActiveKey","expandIcon","RightOutlined","rotate","isActive","Pickaxes"],"mappings":"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","file":"static/js/13.355107ab.chunk.js","sourcesContent":["import Image from 'components/Image';\nimport {\n  PickaxePaintjobNames,\n  PickaxePaintjobIcons as PaintjobIconMap,\n} from 'data/pickaxes';\n\nexport default function PaintjobIcon(props: {\n  paintjob: typeof PickaxePaintjobNames[number];\n}) {\n  return (\n    <div\n      style={{\n        position: 'relative',\n        height: 100,\n        width: 100,\n        margin: 'auto',\n      }}\n    >\n      <div\n        style={{\n          position: 'absolute',\n          transform: 'translate(-50%,-50%)',\n          top: '50%',\n          left: '50%',\n        }}\n      >\n        <Image\n          alt={props.paintjob}\n          src={PaintjobIconMap[props.paintjob]}\n          style={{ height: 100, width: 100 }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { Badge, Card, Col } from 'antd';\nimport { useCallback } from 'react';\nimport { PickaxePaintjobNames, PickaxeParts } from 'data/pickaxes';\nimport './PaintjobCard.css';\nimport useDB from 'db/useDB';\nimport useSuspendedLiveQuery from 'db/useSuspendedLiveQuery';\nimport { MinerColor } from 'utils/miner';\nimport PaintjobIcon from './PaintjobIcon';\n\nconst accentColor = MinerColor.Scout;\n\nexport default function PaintjobCard(props: {\n  paintjob: typeof PickaxePaintjobNames[number];\n}) {\n  const db = useDB();\n  const paintjobPart: PickaxeParts = 'Paintjob';\n  const query = useSuspendedLiveQuery(\n    () => db.pickaxes.get({ name: props.paintjob, part: paintjobPart }),\n    [props.paintjob]\n  );\n\n  /** When clicked, add new entry to IndexedDB if Paintjob doesn't exist,\n   *  or delete its entry if it does. */\n  const toggleEntry = useCallback(() => {\n    if (query === undefined) {\n      db.pickaxes.add({ name: props.paintjob, part: paintjobPart });\n    } else {\n      db.pickaxes.where({ name: props.paintjob, part: paintjobPart }).delete();\n    }\n  }, [db.pickaxes, props.paintjob, query]);\n\n  return (\n    <Col xxl={4} xl={4} lg={8} md={8} sm={8} xs={12}>\n      <Badge.Ribbon className=\"pickaxe-ribbon\" text={props.paintjob}>\n        <Card\n          hoverable\n          onClick={toggleEntry}\n          size=\"small\"\n          style={{\n            backgroundColor: query ? accentColor : 'inherit',\n            transition: 'all 0.3s ease',\n          }}\n        >\n          <PaintjobIcon paintjob={props.paintjob} />\n        </Card>\n      </Badge.Ribbon>\n    </Col>\n  );\n}\n","import { Image, Progress, Tooltip } from 'antd';\nimport { memo, useEffect } from 'react';\nimport { RockAndStone } from 'assets/other';\nimport type { AppDatabase } from 'db/AppDatabase';\nimport useDB from 'db/useDB';\nimport useSuspendedLiveQuery from 'db/useSuspendedLiveQuery';\n\nexport type ProgressQuery = (db: AppDatabase) => Promise<number>;\n\nexport default memo(function PickaxeProgressBar({\n  barColor,\n  category,\n  getProgress,\n}: {\n  barColor: string;\n  category: string;\n  getProgress: ProgressQuery;\n}) {\n  const db = useDB();\n  const progress = useSuspendedLiveQuery(() => getProgress(db), []);\n  const progressPercentage = Math.round((progress || 0) * 100);\n\n  useEffect(() => {\n    gtag('event', 'progress', {\n      event_category: category,\n      event_label: category,\n      value: progressPercentage,\n    });\n  }, [category, progressPercentage]);\n\n  return (\n    <Progress\n      percent={progressPercentage}\n      strokeColor={{\n        '0%': barColor,\n        '100%': '#87d068',\n      }}\n      format={(percent) =>\n        percent === 100 ? (\n          <Tooltip title=\"Assignment complete! Well done, miner.\">\n            <Image\n              alt=\"100% Complete\"\n              preview={false}\n              src={RockAndStone.png}\n              style={{ height: 20, width: 'auto' }}\n            />\n          </Tooltip>\n        ) : (\n          `${percent}%`\n        )\n      }\n    />\n  );\n});\n","import { Card, Collapse, CollapsePanelProps, Row } from 'antd';\nimport { PaintPickaxeIcon } from 'assets/other';\nimport Image from 'components/Image';\nimport { PickaxePaintjobNames } from 'data/pickaxes';\nimport PaintjobCard from './PaintjobCard';\nimport PickaxeProgressBar, { ProgressQuery } from './PickaxeProgressBar';\n\nconst { Panel } = Collapse;\nconst { Meta } = Card;\n\nexport default function PickaxePaintjobs(\n  props: {\n    getProgress: ProgressQuery;\n    paintjobs: typeof PickaxePaintjobNames;\n  } & Omit<CollapsePanelProps, 'key' | 'header'>\n) {\n  const { getProgress, paintjobs, ...panelProps } = props;\n\n  return (\n    <Panel\n      {...panelProps}\n      key={1}\n      style={{ marginTop: 16 }}\n      header={\n        <Meta\n          title=\"Pickaxe Paintjobs\"\n          avatar={\n            <Image\n              alt=\"Pickaxe Paintjobs Progress\"\n              src={PaintPickaxeIcon}\n              style={{ height: 64, width: 64 }}\n            />\n          }\n          description={\n            <PickaxeProgressBar\n              barColor=\"#b00f86\"\n              category=\"PickaxePaintjobs\"\n              getProgress={getProgress}\n            />\n          }\n        />\n      }\n    >\n      <Row gutter={[16, 16]}>\n        {paintjobs.map((paintjob) => (\n          <PaintjobCard key={paintjob} paintjob={paintjob} />\n        ))}\n      </Row>\n    </Panel>\n  );\n}\n","import {\n  Card,\n  Checkbox,\n  Col,\n  Divider,\n  Image as AntImage,\n  Row,\n  Tooltip,\n} from 'antd';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { useCallback, useMemo } from 'react';\nimport { Credit } from 'assets/currencies';\nimport { Assignment, LostPack } from 'assets/other';\nimport Image from 'components/Image';\nimport { Pickaxe, PickaxeParts } from 'data/pickaxes';\nimport useDB from 'db/useDB';\nimport useSuspendedLiveQuery from 'db/useSuspendedLiveQuery';\nimport { MinerColor, MinerColorContrastText } from 'utils/miner';\n\nconst accentColor = MinerColor.Driller;\nconst contrastText = MinerColorContrastText.Driller;\nconst CheckboxOptions: PickaxeParts[] = [\n  'Blades',\n  'Head',\n  'Shaft',\n  'Handle',\n  'Pommel',\n];\n\n/**\n * These type guards are used to get the fallback PNGs or JPGs for\n * Ant's Image component, which only accepts strings and not ImgSrc's\n * union type. (TypeScript is rather unhappy without them.)\n */\nconst isPNGSrc = (imgSrc: ImgSrc): imgSrc is PNGSrc => true;\nconst isJPGSrc = (imgSrc: ImgSrc): imgSrc is JPGSrc => true;\nconst getFallbackSrc = (imgSrc: ImgSrc) =>\n  isPNGSrc(imgSrc) ? imgSrc.png : isJPGSrc(imgSrc) ? imgSrc.jpg : undefined;\n\nexport default function PickaxeCard(props: { pickaxe: Pickaxe }) {\n  /**\n   * Get all matching queries when pickaxe name changes (i.e., only once,\n   * on mount)\n   */\n  const db = useDB();\n  const checkedParts = useSuspendedLiveQuery(\n    () =>\n      db.pickaxes\n        .where({ name: props.pickaxe.name })\n        .and((p) => p.part !== 'Paintjob')\n        .toArray(),\n    [props.pickaxe.name]\n  ).map((p) => p.part);\n\n  /**\n   * Check for newly checked and unchecked partsAdd and delete IndexedDB\n   * entries and add and delete IndexedDB entries, respectively.\n   */\n  const setCheckedParts = useCallback(\n    (values: CheckboxValueType[]) => {\n      // Filter for parts that aren't currently checked and add entries\n      const newlyCheckedItems = values.filter(\n        (v) => !checkedParts.includes(v as PickaxeParts)\n      );\n      if (newlyCheckedItems.length > 0) {\n        db.pickaxes.bulkAdd(\n          newlyCheckedItems.map((i) => ({\n            name: props.pickaxe.name,\n            part: i as PickaxeParts,\n          }))\n        );\n      }\n\n      // Filter for parts that were previously checked and delete entries\n      const newlyUncheckedItems = checkedParts.filter(\n        (v) => !values.includes(v)\n      );\n      if (newlyUncheckedItems.length > 0) {\n        db.pickaxes\n          .where({ name: props.pickaxe.name })\n          .and((p) => newlyUncheckedItems.includes(p.part))\n          .delete();\n      }\n    },\n    [checkedParts, db.pickaxes, props.pickaxe.name]\n  );\n\n  // Checks if all checkboxes are currently checked.\n  const isComplete = useMemo(\n    () => checkedParts.length === CheckboxOptions.length,\n    [checkedParts.length]\n  );\n\n  // Checks if only some of the checkboxes are currently checked.\n  const isPartiallyComplete = useMemo(\n    () =>\n      checkedParts.length !== 0 &&\n      checkedParts.length !== CheckboxOptions.length,\n    [checkedParts.length]\n  );\n\n  /**\n   * Toggle between checking and unchecking all checkboxes\n   * when card header is clicked.\n   * Also adds and deletes all IndexedDB entries appropriately.\n   */\n  const onClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      // We only want to register clicks to the header\n      if (\n        e.target instanceof HTMLElement &&\n        !e.target.matches('.ant-card-head, .ant-card-head *')\n      ) {\n        return;\n      }\n\n      if (isComplete) {\n        // If all checked, delete all part entries from set (except Paintjob)\n        db.pickaxes\n          .where({\n            name: props.pickaxe.name,\n          })\n          .and((p) => p.part !== 'Paintjob')\n          .delete();\n      } else {\n        // Otherwise, add entries for all currently unchecked parts\n        db.pickaxes.bulkAdd(\n          CheckboxOptions.filter((c) => !checkedParts.includes(c)).map((p) => ({\n            name: props.pickaxe.name,\n            part: p,\n          }))\n        );\n      }\n    },\n    [checkedParts, db.pickaxes, isComplete, props.pickaxe.name]\n  );\n\n  // Returns the appropriate icon based on the current pickaxe's source.\n  const iconSrc = useMemo(() => {\n    switch (props.pickaxe.source) {\n      case 'Assignment':\n        return Assignment;\n      case 'DLC':\n        return Credit;\n      case 'Lost Pack':\n        return LostPack;\n    }\n  }, [props.pickaxe.source]);\n\n  return (\n    <Col xxl={6} xl={8} lg={12} md={12} sm={12} xs={24}>\n      <Card\n        hoverable\n        title={\n          <div style={{ whiteSpace: 'break-spaces' }}>\n            {props.pickaxe.name}\n            <Image\n              alt={`${props.pickaxe.name} is acquired via ${props.pickaxe.source}`}\n              src={iconSrc}\n              style={{\n                filter: isComplete\n                  ? `grayscale(1) invert(1) ${\n                      props.pickaxe.source === 'Lost Pack'\n                        ? 'brightness(0)'\n                        : ''\n                    }`\n                  : undefined,\n                float: 'right',\n                height: 24,\n                width: 'auto',\n              }}\n            />\n          </div>\n        }\n        onClick={onClick}\n        headStyle={{\n          backgroundColor: isComplete ? accentColor : 'inherit',\n          color: isComplete ? contrastText : '#cccccc',\n          fontWeight: 'bold',\n          transition: 'all 0.3s',\n        }}\n        style={\n          isPartiallyComplete\n            ? {\n                outline: `3px solid ${accentColor}`,\n              }\n            : undefined\n        }\n      >\n        <Row justify=\"space-between\">\n          <Col span={11} style={{ textAlign: 'center' }}>\n            <Tooltip\n              destroyTooltipOnHide\n              placement=\"bottom\"\n              title={`Obtained via ${props.pickaxe.source}${\n                props.pickaxe.assignmentRank\n                  ? ' at Rank ' + props.pickaxe.assignmentRank\n                  : ''\n              }`}\n            >\n              <AntImage\n                alt={props.pickaxe.name}\n                src={props.pickaxe.icon.webp}\n                fallback={getFallbackSrc(props.pickaxe.icon)}\n                style={{\n                  border: '2px solid #cccccc',\n                  height: 110,\n                  width: 'auto',\n                }}\n              />\n            </Tooltip>\n          </Col>\n          <Col span={2}>\n            <Divider type=\"vertical\" style={{ height: '100%' }} />\n          </Col>\n          <Col span={11}>\n            <Row align=\"middle\" justify=\"space-between\">\n              <Checkbox.Group\n                onChange={setCheckedParts}\n                style={{ width: '100%', whiteSpace: 'nowrap' }}\n                value={checkedParts}\n              >\n                {CheckboxOptions.map((option) => (\n                  <Col key={option} span={24}>\n                    <Checkbox value={option}>{option}</Checkbox>\n                  </Col>\n                ))}\n              </Checkbox.Group>\n            </Row>\n          </Col>\n        </Row>\n      </Card>\n    </Col>\n  );\n}\n","import { Card, Col, Image as AntImage, Row, Tooltip } from 'antd';\nimport { useCallback, useMemo, useRef } from 'react';\nimport { Credit } from 'assets/currencies';\nimport { Assignment, LostPack } from 'assets/other';\nimport Image from 'components/Image';\nimport { PickaxeUniquePart } from 'data/pickaxes';\nimport useDB from 'db/useDB';\nimport useSuspendedLiveQuery from 'db/useSuspendedLiveQuery';\nimport { MinerColor, MinerColorContrastText } from 'utils/miner';\n\nconst accentColor = MinerColor.Engineer;\nconst contrastText = MinerColorContrastText.Engineer;\n\n// These type guards are used to get the fallback PNGs or JPGs for\n//   Ant's Image component, which only accepts strings and not ImgSrc's\n//   union type. (TypeScript is rather unhappy without them.)\nconst isPNGSrc = (imgSrc: ImgSrc): imgSrc is PNGSrc => true;\nconst isJPGSrc = (imgSrc: ImgSrc): imgSrc is JPGSrc => true;\nconst getFallbackSrc = (imgSrc: ImgSrc) =>\n  isPNGSrc(imgSrc) ? imgSrc.png : isJPGSrc(imgSrc) ? imgSrc.jpg : undefined;\n\nexport default function UniquePartCard(props: {\n  uniquePart: PickaxeUniquePart;\n}) {\n  // Get matching IndexedDB entry on mount\n  const db = useDB();\n  const query = useSuspendedLiveQuery(\n    () => db.pickaxeUniques.get({ name: props.uniquePart.name }),\n    [props.uniquePart]\n  );\n\n  /** When clicked, add new entry to IndexedDB if Paintjob doesn't exist,\n   *  or delete its entry if it does. */\n  const toggleEntry = useCallback(() => {\n    if (query === undefined) {\n      db.pickaxeUniques.add({ name: props.uniquePart.name });\n    } else {\n      db.pickaxeUniques.where({ name: props.uniquePart.name }).delete();\n    }\n  }, [db.pickaxeUniques, props.uniquePart, query]);\n\n  /** Returns the appropriate icon based on the current pickaxe's source. */\n  const iconSrc = useMemo(() => {\n    switch (props.uniquePart.source) {\n      case 'Assignment':\n        return Assignment;\n      case 'DLC':\n        return Credit;\n      case 'Lost Pack':\n        return LostPack;\n    }\n  }, [props.uniquePart.source]);\n\n  // This prevents the regular onClick event from triggering if it is on the Image element.\n  const imageRef = useRef<HTMLDivElement>(null);\n  const onClick = useCallback(\n    (e: React.MouseEvent<HTMLDivElement>) => {\n      if (\n        e.target instanceof HTMLElement &&\n        !imageRef.current?.contains(e.target)\n      ) {\n        toggleEntry();\n      }\n    },\n    [toggleEntry]\n  );\n\n  return (\n    <Col xxl={6} xl={8} lg={12} md={12} sm={12} xs={24}>\n      <Card\n        hoverable\n        title={\n          <div style={{ whiteSpace: 'break-spaces' }}>\n            {props.uniquePart.name}\n            <Image\n              alt={`${props.uniquePart.name} is acquired via ${props.uniquePart.source}`}\n              src={iconSrc}\n              style={{\n                filter: query\n                  ? `grayscale(1) invert(1) ${\n                      props.uniquePart.source === 'Lost Pack'\n                        ? 'brightness(100)'\n                        : ''\n                    }`\n                  : undefined,\n                float: 'right',\n                height: 24,\n                width: 'auto',\n              }}\n            />\n          </div>\n        }\n        headStyle={{\n          backgroundColor: query ? accentColor : 'inherit',\n          color: query ? contrastText : '#cccccc',\n          fontWeight: 'bold',\n          transition: 'all 0.3s',\n        }}\n        onClick={onClick}\n      >\n        <Row>\n          <Col span={24} style={{ textAlign: 'center' }}>\n            <Tooltip\n              destroyTooltipOnHide\n              placement=\"bottom\"\n              title={`Unique Part obtained via ${props.uniquePart.source}`}\n            >\n              <div style={{ display: 'inline-block' }} ref={imageRef}>\n                <AntImage\n                  alt={props.uniquePart.name}\n                  src={props.uniquePart.icon.webp}\n                  fallback={getFallbackSrc(props.uniquePart.icon)}\n                  style={{\n                    border: '2px solid #cccccc',\n                    height: 110,\n                    width: 'auto',\n                  }}\n                />\n              </div>\n            </Tooltip>\n          </Col>\n        </Row>\n      </Card>\n    </Col>\n  );\n}\n","import { Card, Collapse, CollapsePanelProps, Row } from 'antd';\nimport { PickaxeIcon } from 'assets/other/';\nimport Image from 'components/Image';\nimport { Pickaxe, UniqueParts } from 'data/pickaxes';\nimport PickaxeCard from './PickaxeCard';\nimport PickaxeProgressBar, { ProgressQuery } from './PickaxeProgressBar';\nimport UniquePartCard from './UniquePartCard';\n\nconst { Panel } = Collapse;\nconst { Meta } = Card;\n\nexport default function PickaxeParts(\n  props: {\n    getProgress: ProgressQuery;\n    pickaxes: Pickaxe[];\n  } & Omit<CollapsePanelProps, 'key' | 'header'>\n) {\n  const { getProgress, pickaxes, ...panelProps } = props;\n\n  return (\n    <Panel\n      {...panelProps}\n      key={0}\n      style={{ marginTop: 16 }}\n      header={\n        <Meta\n          title=\"Pickaxe Parts\"\n          avatar={\n            <Image\n              alt=\"Pickaxe Parts Progress\"\n              src={PickaxeIcon}\n              style={{ height: 64, width: 64 }}\n            />\n          }\n          description={\n            <PickaxeProgressBar\n              barColor=\"#dc8c13\"\n              category=\"PickaxeSets\"\n              getProgress={getProgress}\n            />\n          }\n        />\n      }\n    >\n      <Row gutter={[16, 16]}>\n        {pickaxes.map((pickaxe) => (\n          <PickaxeCard key={pickaxe.name} pickaxe={pickaxe} />\n        ))}\n        {UniqueParts.map((uniquePart) => (\n          <UniquePartCard key={uniquePart.name} uniquePart={uniquePart} />\n        ))}\n      </Row>\n    </Panel>\n  );\n}\n","import { RightOutlined } from '@ant-design/icons';\nimport { Collapse } from 'antd';\nimport { useCallback } from 'react';\nimport {\n  PickaxePaintjobNames,\n  Pickaxes,\n  PickaxeSets,\n  PickaxeUniquePartNames,\n} from 'data/pickaxes';\nimport { AppDatabase } from 'db/AppDatabase';\nimport PickaxePaintjobs from './PickaxePaintjobs';\nimport PickaxeParts from './PickaxeParts';\n\nexport default function PickaxesPage() {\n  /** Get total count for all acquired pickaxe parts EXCEPT Paintjobs. */\n  const getPartProgress = useCallback(async (db: AppDatabase) => {\n    const acquiredPickaxes = await db.pickaxes\n      .where('name')\n      .anyOf(PickaxeSets)\n      .and((p) => p.part !== 'Paintjob')\n      .count();\n    const acquiredUniques = await db.pickaxeUniques\n      .where('name')\n      .anyOf(PickaxeUniquePartNames)\n      .count();\n    // Denominator: 6 Total Pickaxe Parts - 1 Paintjob Part = 5 Non-Paintjob Parts\n    return (\n      (acquiredPickaxes + acquiredUniques) /\n      (PickaxeSets.length * 5 + PickaxeUniquePartNames.length)\n    );\n  }, []);\n\n  /** Get total count for all pickaxe Paintjob parts ONLY. */\n  const getPaintjobProgress = useCallback(async (db: AppDatabase) => {\n    const acquiredPaintjobs = await db.pickaxes\n      .where('name')\n      .anyOf(PickaxePaintjobNames)\n      .and((p) => p.part === 'Paintjob')\n      .count();\n    // 6 Total Pickaxe Parts - 1 Paintjob Part = 5 Remaining Parts\n    return acquiredPaintjobs / PickaxePaintjobNames.length;\n  }, []);\n\n  return (\n    <Collapse\n      className=\"unselectable\"\n      expandIconPosition=\"right\"\n      defaultActiveKey={[0, 1]}\n      expandIcon={(p) => (\n        <RightOutlined\n          style={{ marginTop: 16 }}\n          rotate={p.isActive ? 90 : undefined}\n        />\n      )}\n    >\n      <PickaxeParts pickaxes={Pickaxes} getProgress={getPartProgress} />\n      <PickaxePaintjobs\n        paintjobs={PickaxePaintjobNames}\n        getProgress={getPaintjobProgress}\n      />\n    </Collapse>\n  );\n}\n"],"sourceRoot":""}