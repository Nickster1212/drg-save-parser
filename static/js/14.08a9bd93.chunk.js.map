{"version":3,"sources":["components/analyzeModal/getArmorPaintjobsFromSaveFile.ts","components/analyzeModal/getCommonArmorPaintjobsFromSaveFile.ts","utils/object.ts","components/analyzeModal/getFrameworksFromSaveFile.ts","components/analyzeModal/getOverclocksFromSaveFile.ts","components/analyzeModal/getPickaxeUniquesFromSaveFile.ts","components/analyzeModal/getPickaxesFromSaveFile.ts","components/analyzeModal/AnalyzeSaveFile.tsx"],"names":["getArmorPaintJobsFromSaveFile","CharacterSaves","acquiredArmorPaintjobs","idToEntry","Object","fromEntries","entries","ArmorPaintjobs","flatMap","miner","map","paintJob","partID","name","ids","Vanity","CharacterVanitySave","UnLockedVanityItemIDs","entry","includes","push","getCommonArmorPaintJobsFromSaveFile","acquiredPaintjobs","CommonArmorPaintjobs","paintjob","flipObject","obj","ret","keys","forEach","key","getFrameworksFromSaveFile","unlockedItemSkins","UnlockedItemSkins","acquiredFrameworks","weaponIDs","WeaponIDs","weaponID","frameworkIDs","weapon","undefined","frameworks","frameworkID","FrameworkIDs","filter","f","framework","getOverclocksFromSaveFile","SchematicSave","forgedSchematics","ForgedSchematics","unforgedSchematics","OwnedSchematics","acquiredOverclocks","values","Overclocks","reduce","p","c","assign","overclocks","overclock","some","id","isForged","getPickaxeUniquesFromSaveFile","unlockedPickaxeParts","UnlockedPickaxeParts","acquiredUniques","unlockedPartId","UniqueParts","unique","getPickaxesFromSaveFile","acquiredParts","Pickaxes","pickaxe","partIDs","partType","part","Text","AnalyzeSaveFile","props","useState","hasClickedButton","setHasClickedButton","loading","setLoading","db","useDB","parseSaveFile","useCallback","a","startTime","window","performance","now","parser","parse_save_file","saveFile","pickaxes","pickaxeUniques","armorPaintjobs","commonArmorPaintjobs","transaction","tables","clearAll","bulkAdd","success","message","type","description","length","duration","gtag","value","Math","round","event_category","event_label","non_interaction","hide","fatal","error","code","console","justify","size","direction","span","offset","accept","fileList","beforeUpload","isMobile","disabled","icon","LoadingOutlined","UploadOutlined","onClick","style","marginTop","Image","src","MissionControlPortrait","alt","width","height","dashed","margin","strong"],"mappings":"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","file":"static/js/14.08a9bd93.chunk.js","sourcesContent":["import type { SaveFile } from 'drg-save-parser';\nimport { ArmorPaintjobs } from 'data/armor';\nimport type { ArmorPaintjobEntry } from 'db/AppDatabase';\n\nexport const getArmorPaintJobsFromSaveFile = ({\n  CharacterSaves,\n}: SaveFile): ArmorPaintjobEntry[] => {\n  const acquiredArmorPaintjobs: ArmorPaintjobEntry[] = [];\n\n  // We only have a list of IDs, so translate our map of armor paint jobs\n  // to key off of the ID\n  const idToEntry = Object.fromEntries(\n    Object.entries(ArmorPaintjobs).flatMap(([miner, paintJobs]) => {\n      return paintJobs.map((paintJob) => [\n        paintJob.partID,\n        {\n          miner,\n          name: paintJob.name,\n        } as ArmorPaintjobEntry,\n      ]);\n    })\n  );\n\n  for (const {\n    Vanity: {\n      CharacterVanitySave: { UnLockedVanityItemIDs: ids },\n    },\n  } of CharacterSaves) {\n    for (const id of ids) {\n      const entry = idToEntry[id];\n\n      // Make sure we this ID is actually an armor paint job, and then make\n      // sure we haven't already seen it because there can be duplicates\n      if (entry != null && !acquiredArmorPaintjobs.includes(entry)) {\n        acquiredArmorPaintjobs.push(entry);\n      }\n    }\n  }\n\n  return acquiredArmorPaintjobs;\n};\n","import type { SaveFile } from 'drg-save-parser';\nimport { CommonArmorPaintjobs } from 'data/armor';\nimport type { CommonArmorPaintjobEntry } from 'db/AppDatabase';\n\nexport const getCommonArmorPaintJobsFromSaveFile = ({\n  CharacterSaves,\n}: SaveFile): CommonArmorPaintjobEntry[] => {\n  const acquiredPaintjobs: CommonArmorPaintjobEntry[] = [];\n\n  const idToEntry = Object.fromEntries(\n    CommonArmorPaintjobs.map((paintjob) => [\n      paintjob.partID,\n      { name: paintjob.name },\n    ])\n  );\n\n  for (const {\n    Vanity: {\n      CharacterVanitySave: { UnLockedVanityItemIDs: ids },\n    },\n  } of CharacterSaves) {\n    for (const id of ids) {\n      const entry = idToEntry[id];\n      if (entry != null && !acquiredPaintjobs.includes(entry)) {\n        acquiredPaintjobs.push(entry);\n      }\n    }\n  }\n\n  return acquiredPaintjobs;\n};\n","export function filterObject<K extends string, V>(\n  obj: Record<K, V>,\n  predicate: (key: K, value: V) => boolean\n): Record<K, V> {\n  return Object.keys(obj)\n    .filter((key) => predicate(key as K, obj[key as K] as V))\n    .reduce(\n      (res, key) => Object.assign(res, { [key]: obj[key as K] }),\n      {}\n    ) as Record<K, V>;\n}\n\nexport function flipObject<K extends string, V extends string>(\n  obj: Record<K, V>\n): Record<V, K> {\n  const ret: { [s: string]: string } = {};\n  Object.keys(obj).forEach((key) => {\n    ret[(obj as { [s: string]: string })[key] as string] = key;\n  });\n  return ret as Record<V, K>;\n}\n","import type { SaveFile } from 'drg-save-parser';\nimport { Framework, FrameworkIDs } from 'data/frameworks';\nimport type { FrameworkEntry } from 'db/AppDatabase';\nimport { flipObject } from 'utils/object';\nimport { WeaponIDs } from 'utils/weapons';\n\nexport const getFrameworksFromSaveFile = ({\n  UnlockedItemSkins: unlockedItemSkins,\n}: SaveFile): FrameworkEntry[] => {\n  const acquiredFrameworks: FrameworkEntry[] = [];\n  const weaponIDs = flipObject(WeaponIDs);\n  Object.entries(unlockedItemSkins).forEach(([weaponID, frameworkIDs]) => {\n    const weapon = weaponIDs[weaponID];\n    if (weapon === undefined) {\n      return;\n    }\n    const frameworks = frameworkIDs\n      .map(\n        (frameworkID) =>\n          flipObject(FrameworkIDs[weapon])[frameworkID] as Framework | undefined\n      )\n      .filter((f) => f !== undefined) as Framework[];\n    for (const framework of frameworks) {\n      acquiredFrameworks.push({ weapon: weapon, name: framework });\n    }\n  });\n  return acquiredFrameworks;\n};\n","import type { SaveFile } from 'drg-save-parser';\nimport { Overclocks, Overclock } from 'data/overclocks';\nimport type { OverclockEntry } from 'db/AppDatabase';\nimport { Miner } from 'utils/miner';\nimport { MinerWeapon } from 'utils/weapons';\n\n/**\n * The save file just contains a list of GUIDs of the acquired overclocks (\"schematics\").\n * We need to translate that into the weapon / overclock name pair we use to track progress.\n */\nexport const getOverclocksFromSaveFile = ({\n  SchematicSave: {\n    SchematicSave: {\n      ForgedSchematics: forgedSchematics,\n      OwnedSchematics: unforgedSchematics,\n    },\n  },\n}: SaveFile): OverclockEntry[] => {\n  const acquiredOverclocks: OverclockEntry[] = [];\n  Object.entries(\n    Object.values(Overclocks).reduce(\n      (p, c) => Object.assign(p, c),\n      {}\n    ) as Record<MinerWeapon<Miner>, Overclock[]>\n  ).forEach(([weapon, overclocks]) => {\n    for (const overclock of overclocks) {\n      if (\n        forgedSchematics !== undefined &&\n        forgedSchematics.some((f) => overclock.id === f)\n      ) {\n        acquiredOverclocks.push({\n          weapon: weapon as MinerWeapon<Miner>,\n          name: overclock.name,\n          isForged: true,\n        });\n      }\n      if (\n        unforgedSchematics !== undefined &&\n        unforgedSchematics.some((f) => overclock.id === f)\n      ) {\n        acquiredOverclocks.push({\n          weapon: weapon as MinerWeapon<Miner>,\n          name: overclock.name,\n          isForged: false,\n        });\n      }\n    }\n  });\n  return acquiredOverclocks;\n};\n","import type { SaveFile } from 'drg-save-parser';\nimport { PickaxeUniquePartNames, UniqueParts } from 'data/pickaxes';\nimport type { PickaxeUniquePartEntry } from 'db/AppDatabase';\n\n/**\n * The save file just contains a list of GUIDs of the acquired pickaxe parts.\n * This one is simple and simply checks the GUIDs in the save file's\n * UnlockedPickaxeParts[] against all the GUIDs in data/pickaxes.ts\n */\nexport const getPickaxeUniquesFromSaveFile = ({\n  UnlockedPickaxeParts: unlockedPickaxeParts,\n}: SaveFile): PickaxeUniquePartEntry[] => {\n  const acquiredUniques: PickaxeUniquePartEntry[] = [];\n  Object.values(unlockedPickaxeParts).forEach((unlockedPartId) => {\n    if (unlockedPartId === undefined) return;\n\n    for (const unique of UniqueParts) {\n      if (unique.id === unlockedPartId) {\n        acquiredUniques.push({\n          name: unique.name as typeof PickaxeUniquePartNames[number],\n        });\n      }\n    }\n  });\n  return acquiredUniques;\n};\n","import type { SaveFile } from 'drg-save-parser';\nimport { Pickaxes, PickaxeParts, PickaxeSets } from 'data/pickaxes';\nimport type { PickaxeEntry } from 'db/AppDatabase';\n\n/**\n * The save file just contains a list of GUIDs of the acquired pickaxe parts.\n * This one is simple and simply checks the GUIDs in the save file's\n * UnlockedPickaxeParts[] against all the GUIDs in data/pickaxes.ts\n */\nexport const getPickaxesFromSaveFile = ({\n  UnlockedPickaxeParts: unlockedPickaxeParts,\n}: SaveFile): PickaxeEntry[] => {\n  const acquiredParts: PickaxeEntry[] = [];\n  Object.values(unlockedPickaxeParts).forEach((unlockedPartId) => {\n    if (unlockedPartId === undefined) return;\n\n    // Checks each GUID in the save file against all PartIDs in each Pickaxe Set\n    for (const pickaxe of Pickaxes) {\n      Object.entries(pickaxe.partIDs).forEach(([partType, id]) => {\n        if (id === unlockedPartId) {\n          acquiredParts.push({\n            name: pickaxe.name as typeof PickaxeSets[number],\n            part: partType as PickaxeParts,\n          });\n        }\n      });\n    }\n  });\n  return acquiredParts;\n};\n","import { LoadingOutlined, UploadOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Col,\n  Divider,\n  Row,\n  Space,\n  Typography,\n  Upload,\n  notification,\n} from 'antd';\nimport { RcFile } from 'antd/lib/upload';\nimport { useCallback, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { MissionControlPortrait } from 'assets/portraits';\nimport Image from 'components/Image';\nimport useDB from 'db/useDB';\nimport { getArmorPaintJobsFromSaveFile } from './getArmorPaintjobsFromSaveFile';\nimport { getCommonArmorPaintJobsFromSaveFile } from './getCommonArmorPaintjobsFromSaveFile';\nimport { getFrameworksFromSaveFile } from './getFrameworksFromSaveFile';\nimport { getOverclocksFromSaveFile } from './getOverclocksFromSaveFile';\nimport { getPickaxeUniquesFromSaveFile } from './getPickaxeUniquesFromSaveFile';\nimport { getPickaxesFromSaveFile } from './getPickaxesFromSaveFile';\n\nconst { Text } = Typography;\n\nexport default function AnalyzeSaveFile(props: { hide: () => void }) {\n  const [hasClickedButton, setHasClickedButton] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const db = useDB();\n\n  const upload = (f: RcFile): false => {\n    gtag('event', 'upload_attempt', {\n      event_label: `Attempted on ${isMobile ? 'Mobile' : 'Desktop'}`,\n    });\n    parseSaveFile(f);\n    return false;\n  };\n\n  const parseSaveFile = useCallback(\n    async (f: RcFile): Promise<void> => {\n      // Start a timer to keep track of how long it took to parse (if browser supports it)\n      const startTime = window.performance ? performance.now() : undefined;\n      setLoading(true);\n\n      try {\n        // Parse the save file using the WASM library\n        const parser = await import('drg-save-parser');\n        const saveFile = await parser.parse_save_file(f);\n\n        // Extract the relevant information from the parsed save file\n        const overclocks = getOverclocksFromSaveFile(saveFile);\n        const frameworks = getFrameworksFromSaveFile(saveFile);\n        const pickaxes = getPickaxesFromSaveFile(saveFile);\n        const pickaxeUniques = getPickaxeUniquesFromSaveFile(saveFile);\n        const armorPaintjobs = getArmorPaintJobsFromSaveFile(saveFile);\n        const commonArmorPaintjobs = getCommonArmorPaintJobsFromSaveFile(\n          saveFile\n        );\n\n        // Update the store with the new save file data\n        await db.transaction('rw', db.tables, async () => {\n          await db.clearAll();\n          await db.overclocks.bulkAdd(overclocks);\n          await db.frameworks.bulkAdd(frameworks);\n          await db.pickaxes.bulkAdd(pickaxes);\n          await db.pickaxeUniques.bulkAdd(pickaxeUniques);\n          await db.armorPaintjobs.bulkAdd(armorPaintjobs);\n          await db.commonArmorPaintjobs.bulkAdd(commonArmorPaintjobs);\n        });\n\n        // Show the user a success notification with how many items were\n        // successfully imported\n        notification.success({\n          message: <Text type=\"success\">Save File Analyzed!</Text>,\n          description:\n            `Successfully imported ${overclocks.length} Overclocks, ` +\n            `${frameworks.length} Frameworks, ` +\n            `${armorPaintjobs.length + commonArmorPaintjobs.length} ` +\n            `Armor Paintjobs, and ` +\n            `${pickaxes.length + pickaxeUniques.length} ` +\n            `Pickaxe Parts.`,\n          duration: 10,\n        });\n\n        // Let the devs know (anonymously, of course) how many items of each\n        // type were found, and how long it took to parse the file\n        if (startTime) {\n          gtag('event', 'timing_complete', {\n            name: 'parsing_time',\n            value: Math.round(performance.now() - startTime),\n          });\n        }\n        gtag('event', 'success', {\n          event_category: 'Save File Analyzed',\n          event_label: 'Overclock Count',\n          value: `${overclocks.length}`,\n          non_interaction: true,\n        });\n        gtag('event', 'success', {\n          event_category: 'Save File Analyzed',\n          event_label: 'Frameworks Count',\n          value: `${frameworks.length}`,\n          non_interaction: true,\n        });\n        gtag('event', 'success', {\n          event_category: 'Save File Analyzed',\n          event_label: 'Pickaxe Parts Count',\n          value: `${pickaxes.length}`,\n          non_interaction: true,\n        });\n        gtag('event', 'success', {\n          event_category: 'Save File Analyzed',\n          event_label: 'Pickaxe Uniques Count',\n          value: `${pickaxeUniques.length}`,\n          non_interaction: true,\n        });\n\n        // Hide the Analyze Modal on Success\n        props.hide();\n      } catch (e) {\n        // Catch file analysis errors (and let the devs know there was a problem)\n        gtag('event', 'exception', {\n          description: e,\n          fatal: false,\n        });\n        notification.error({\n          message: <Text type=\"danger\">Error Analyzing Save File:</Text>,\n          // eslint-disable-next-line\n          description: <Text code>{(e as any).message}</Text>,\n          duration: 10,\n        });\n        console.error(e);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [db, props]\n  );\n\n  return (\n    <Row justify=\"center\">\n      <Space size=\"middle\" direction=\"vertical\">\n        <Row justify=\"start\">\n          <Col span={18} offset={3}>\n            <Space direction=\"vertical\">\n              <Text>\n                Tired of all that clicking around just to input your current\n                progress? Upload your save file and let Bosco do all the hard\n                work for you!\n              </Text>\n              <Text>The file is located in your Steam folder by default:</Text>\n              <Text code>\n                {\n                  'C:\\\\Program Files (x86)\\\\Steam\\\\steamapps\\\\common\\\\Deep Rock Galactic\\\\FSD\\\\Saved\\\\SaveGames\\\\<steam_ID>_Player.sav'\n                }\n              </Text>\n            </Space>\n          </Col>\n        </Row>\n        <Row justify=\"center\">\n          <Upload accept=\".sav\" fileList={[]} beforeUpload={upload}>\n            {loading ? (\n              <Button disabled size=\"large\" icon={<LoadingOutlined />}>\n                Analyzing...\n              </Button>\n            ) : (\n              <Button\n                type=\"primary\"\n                size=\"large\"\n                icon={<UploadOutlined />}\n                onClick={() => setHasClickedButton(true)}\n              >\n                Select Save File\n              </Button>\n            )}\n          </Upload>\n          {hasClickedButton && isMobile ? (\n            <Col span={20} style={{ marginTop: 24 }}>\n              <Space>\n                <Image\n                  src={MissionControlPortrait}\n                  alt=\"Mission Control\"\n                  width={64}\n                  height={64}\n                />\n                <Text>\n                  &quot;Management sees your intrepid attempts to access your\n                  save file from your mobile device and salutes your\n                  efforts.&quot;\n                </Text>\n              </Space>\n            </Col>\n          ) : null}\n        </Row>\n        <Divider dashed style={{ margin: 0 }} />\n        <Row>\n          <Col span={18} offset={3}>\n            <Text type=\"secondary\">\n              <Text strong>{'Note: '}</Text>\n              Bosco analyzes your save file in your browser locally to keep it\n              safe from pointy-eared leaf-lovers.\n            </Text>\n          </Col>\n        </Row>\n      </Space>\n    </Row>\n  );\n}\n"],"sourceRoot":""}